import Foundation

class SpeedLog {
    static let t0 = Date()
    private static var printedHeader = false
    private static var lastActionTime = Date()
    private static var lastDataTime: Date? = nil
    static var logFunc: (_ message: String) -> Void = { msg in
        print(tag + msg)
    }
    private static let tag = "[SLOG]"
    
    private class func printHeaderIfNeed() {
        if printedHeader {
            return
        }
        logFunc("| view | action/type | duration(s) | cls(s) | |")
        logFunc("|---|---|---:|---:|---:|")
        printedHeader = true
    }
    
    private class func printRow(
        view: String,
        isAction: Bool,
        name: String,
        duration: Double? = nil,
        cls: Double? = nil,
        isOK: Bool? = nil
    ) {
        let nameColumnValue = (isAction ? "‚ö°Ô∏è" : "üéØ") + name
        var durationColumnValue = "---"
        if let duration = duration {
            durationColumnValue = "\(duration)"
        }
        var clsColumnValue = "---"
        if let cls = cls {
            clsColumnValue = "\(cls)"
        }
        var alertColumnValue = "---"
        if let isOK = isOK {
            alertColumnValue = !isOK ? "‚ùå" : "‚úÖ"
        }
        logFunc("| \(view) | \(nameColumnValue) | \(durationColumnValue) | \(clsColumnValue) | \(alertColumnValue) |")
    }
    
    private class func printBlankRow() {
        logFunc("| --- | --- | --- | --- | --- |")
    }
    
    // Return th·ªùi gian t·ª´ start ƒë·∫øn end, t√≠nh b·∫±ng gi√¢y v√† l·∫•y 3 s·ªë l·∫ª ph·∫ßn th·∫≠p ph√¢n
    private class func calDuration(start: Date, end: Date) -> Double {
        let timeInterval = end.timeIntervalSince(start)
        return Double(round(timeInterval * 1000) / 1000)
    }
    
    class func begin(view: String, action: String) {
        lastActionTime = Date()
        lastDataTime = nil
        printHeaderIfNeed()
        printBlankRow()
        printRow(
            view: view,
            isAction: true,
            name: action
        )
    }
    
    // Ho√†n t·∫•t qu√° tr√¨nh transition ho·∫∑c present m·ªôt view m·ªõi
    // Vi·ªác k·∫øt th√∫c n√†y kh√¥ng ƒë·ªìng th·ªùi v·ªõi vi·ªác layout view ƒë√£ c·ªë ƒë·ªãnh ho·∫∑c vi·ªác render data ƒë√£ ho√†n t·∫•t.
    class func finishAppear(view: String = "app") {
        printHeaderIfNeed()
        let duration = calDuration(start: lastActionTime, end: Date())
        printRow(
            view: view,
            isAction: false,
            name: "view_appeared",
            duration: duration,
            isOK: duration <= 1
        )
    }
    
    class func finishShowIndicator(view: String = "app") {
        printHeaderIfNeed()
        let duration = calDuration(start: lastActionTime, end: Date())
        printRow(
            view: view,
            isAction: false,
            name: "indicator_appeared",
            duration: duration,
            isOK: duration <= 0.3
        )
    }
    
    class func finish(view: String = "app", customType: String) {
        printHeaderIfNeed()
        let duration = calDuration(start: lastActionTime, end: Date())
        printRow(
            view: view,
            isAction: false,
            name: customType,
            duration: duration
        )
    }
    
    // Ho√†n t·∫•t vi·ªác hi·ªÉn th·ªã data tr√™n view
    class func finishUpdateData(view: String = "app") {
        var cls: Double = 0
        let current = Date()
        if let lastDataTime = lastDataTime {
            cls = calDuration(start: lastDataTime, end: current)
        } else {
            // Ch·ªâ update lastDataTime m·ªôt l·∫ßn duy nh·∫•t, ƒë√≥ l√† l·∫ßn ƒë·∫ßu ti√™n c√≥ data
            // T·ª´ c√°c l·∫ßn sau s·∫Ω b·∫Øt ƒë·∫ßu t√≠nh ch·ªâ s·ªë cls
            lastDataTime = current
        }
        printHeaderIfNeed()
        let duration = calDuration(start: lastActionTime, end: Date())
        printRow(
            view: view,
            isAction: false,
            name: "view_updated",
            duration: duration,
            cls: cls,
            isOK: duration <= 2 && cls <= 0.5
        )
    }
}
